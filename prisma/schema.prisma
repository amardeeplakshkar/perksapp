datasource db {
provider = "mongodb"
url = env("DATABASE_URL")
}

generator client {
provider = "prisma-client-js"
}

enum PerkLevel {
gold
diamond
silver
bronze
none
}

model User {
id String @id @default(auto()) @map("_id") @db.ObjectId
telegramId Int @unique
username String?
firstName String?
lastName String?
points Int @default(0)
hasClaimedWelcomePoints Boolean @default(false)
isNewUser Boolean @default(true)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
dailyPlays Int @default(0)
lastPlayedDate DateTime?
walletAddress String? 
isWalletConnected Boolean @default(false)
transactions Transaction[]
taskCompletions TaskCompletion[]

referrals User[] @relation("UserReferrals")
referredBy User? @relation("UserReferrals", fields: [referredByTelegramId], references: [telegramId], onDelete: NoAction, onUpdate: NoAction)
referredByTelegramId Int? 

perkLevel PerkLevel @default(none)
photoUrl String?

checkInStreak Int? @default(0)
lastCheckInDate DateTime?
hasCheckedIn Boolean @default(false)
}

model Task {
id String @id @default(auto()) @map("_id") @db.ObjectId
name String
points Int
completed Boolean @default(false)
users TaskCompletion[] 
}

model TaskCompletion {
id String @id @default(auto()) @map("_id") @db.ObjectId 
userId String 
taskId String 
completed DateTime @default(now()) 

user User @relation(fields: [userId], references: [id])
task Task @relation(fields: [taskId], references: [id])

@@unique([userId, taskId]) 
}

model Transaction {
id String @id @default(auto()) @map("_id") @db.ObjectId
userId String 
amount Float 
timestamp DateTime @default(now())
user User @relation(fields: [userId], references: [id])
}
